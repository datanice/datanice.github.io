(function() {
  var rand, umd,
    slice = [].slice;

  rand = function() {
    return ((Math.random().toString(36)) + "00000000000000000").replace(/[^a-z]+/g, "").slice(0, 5);
  };

  umd = function(factory) {
    if (typeof exports === 'object') {
      return module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else {
      return this.textures = factory();
    }
  };

  umd(function() {
    return {
      lines: function() {
        var background, id, lines, orientation, path, shapeRendering, size, stroke, strokeWidth;
        size = 20;
        strokeWidth = 2;
        stroke = "#343434";
        id = rand();
        background = "";
        orientation = ["diagonal"];
        shapeRendering = "auto";
        path = function(orientation) {
          switch (orientation) {
            case "0/8":
              return (function(s) {
                return "M " + (s / 2) + ", 0 l 0, " + s;
              })(size);
            case "vertical":
              return (function(s) {
                return "M " + (s / 2) + ", 0 l 0, " + s;
              })(size);
            case "1/8":
              return (function(s) {
                return "M " + (s / 4) + ",0 l " + (s / 2) + "," + s + " M " + (-s / 4) + ",0 l " + (s / 2) + "," + s + "\nM " + (s * 3 / 4) + ",0 l " + (s / 2) + "," + s;
              })(size);
            case "2/8":
              return (function(s) {
                return "M 0," + s + " l " + s + "," + (-s) + " M " + (-s / 4) + "," + (s / 4) + " l " + (s / 2) + "," + (-s / 2) + "\nM " + (3 / 4 * s) + "," + (5 / 4 * s) + " l " + (s / 2) + "," + (-s / 2);
              })(size);
            case "diagonal":
              return (function(s) {
                return "M 0," + s + " l " + s + "," + (-s) + " M " + (-s / 4) + "," + (s / 4) + " l " + (s / 2) + "," + (-s / 2) + "\nM " + (3 / 4 * s) + "," + (5 / 4 * s) + " l " + (s / 2) + "," + (-s / 2);
              })(size);
            case "3/8":
              return (function(s) {
                return "M 0," + (3 / 4 * s) + " l " + s + "," + (-s / 2) + " M 0," + (s / 4) + " l " + s + "," + (-s / 2) + "\nM 0," + (s * 5 / 4) + " l " + s + "," + (-s / 2);
              })(size);
            case "4/8":
              return (function(s) {
                return "M 0," + (s / 2) + " l " + s + ",0";
              })(size);
            case "horizontal":
              return (function(s) {
                return "M 0," + (s / 2) + " l " + s + ",0";
              })(size);
            case "5/8":
              return (function(s) {
                return "M 0," + (-s / 4) + " l " + s + "," + (s / 2) + "M 0," + (s / 4) + " l " + s + "," + (s / 2) + "\nM 0," + (s * 3 / 4) + " l " + s + "," + (s / 2);
              })(size);
            case "6/8":
              return (function(s) {
                return "M 0,0 l " + s + "," + s + " M " + (-s / 4) + "," + (3 / 4 * s) + " l " + (s / 2) + "," + (s / 2) + "\nM " + (s * 3 / 4) + "," + (-s / 4) + " l " + (s / 2) + "," + (s / 2);
              })(size);
            case "7/8":
              return (function(s) {
                return "M " + (-s / 4) + ",0 l " + (s / 2) + "," + s + " M " + (s / 4) + ",0 l " + (s / 2) + "," + s + "\nM " + (s * 3 / 4) + ",0 l " + (s / 2) + "," + s;
              })(size);
            default:
              return (function(s) {
                return "M " + (s / 2) + ", 0 l 0, " + s;
              })(size);
          }
        };
        lines = function(args) {
          var g, i, len, o, results;
          g = d3.select(args.node()).append("defs").append("pattern")
          .attr("id",id)
          .attr("patternUnits", "userSpaceOnUse")
          .attr("width", size)
          .attr("height", size);
          if (background) {
            g.append("rect").attr({
              width: size,
              height: size,
              fill: background
            });
          }
          results = [];
          for (i = 0, len = orientation.length; i < len; i++) {
            o = orientation[i];
            results.push(d3.select(g.node()).append("path")
            	.attr("d", path(o))
              .attr("stroke-width", strokeWidth)
              .attr("shape-rendering", shapeRendering)
              .attr("stroke", stroke)
              .attr("stroke-linecap", "square"));
          }
          return results;
        };
        lines.background = function(_) {
          background = _;
          return lines;
        };
        lines.shapeRendering = function(_) {
          shapeRendering = _;
          return lines;
        };
        lines.heavier = function(_) {
          if (!arguments.length) {
            strokeWidth = strokeWidth * 2;
          } else {
            strokeWidth = _ ? strokeWidth * 2 * _ : strokeWidth * 2;
          }
          return lines;
        };
        lines.lighter = function(_) {
          if (!arguments.length) {
            strokeWidth = strokeWidth / 2;
          } else {
            strokeWidth = _ ? strokeWidth / (2 * _) : strokeWidth / 2;
          }
          return lines;
        };
        lines.thinner = function(_) {
          if (!arguments.length) {
            size = size * 2;
          } else {
            size = _ ? size * 2 * _ : size * 2;
          }
          return lines;
        };
        lines.thicker = function(_) {
          if (!arguments.length) {
            size = size / 2;
          } else {
            size = _ ? size / (2 * _) : size / 2;
          }
          return lines;
        };
        lines.orientation = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          orientation = args;
          return lines;
        };
        lines.size = function(_) {
          size = _;
          return lines;
        };
        lines.stroke = function(_) {
          stroke = _;
          return lines;
        };
        lines.strokeWidth = function(_) {
          strokeWidth = _;
          return lines;
        };
        lines.id = function(_) {
          if (!arguments.length) {
            return id;
          } else {
            id = _;
            return lines;
          }
        };
        lines.url = function() {
          return "url(#" + id + ")";
        };
        return lines;
      }
    };
  });

}).call(this);